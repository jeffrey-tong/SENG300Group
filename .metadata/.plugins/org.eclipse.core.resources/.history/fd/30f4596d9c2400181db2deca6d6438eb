package parser;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
import org.eclipse.jdt.core.dom.ASTVisitor; 

public class TypeParserV2 {

	public static int defCount = 0; 
	public static int refCount = 0; 
	public static String type; 
	
	public static String fileContents(String fileName) throws IOException {
		StringBuilder content = new StringBuilder(); 
		BufferedReader reader = new BufferedReader(new FileReader(fileName));
		String line = null; 
		
		while((line = reader.readLine()) != null) {
			content.append(line); 
		}
		
		reader.close(); 
		return content.toString(); 
	}
		
	public static void main(String[] args) throws IOException {
	//	String sourcePath = args[0]; 
		String[] sourcePath = {"C:\\Users\\jr281\\Desktop\\SENG300Group\\SENG300Group\\bin\\parser\\Test.java"};
		String[] classPath = {"C:\\Usersjr281\\Desktop\\SENG300Group\\SENG300Group\\src\\parser\\Test.class"};
		String fileName = sourcePath[0].substring(sourcePath[0].lastIndexOf("\\")+1);
		ASTParser parser = ASTParser.newParser(AST.JLS8);
		char[] fileData = fileContents(fileName).toCharArray(); 
		
		parser.setResolveBindings(true);
		parser.setBindingsRecovery(true);
		parser.setEnvironment(classPath, sourcePath, null, false);
		parser.setKind(ASTParser.K_COMPILATION_UNIT);
		parser.setSource(fileData);
		
		CompilationUnit cu = (CompilationUnit)parser.createAST(null);
		
		cu.accept(new ASTVisitor() {
			ArrayList<Object> names = new ArrayList<Object>();
			
			//Records number of declarations of given type 
			public boolean visit(VariableDeclarationFragment node) {
				SimpleName name = node.getName(); 
				this.names.add(name.getIdentifier());
				System.out.println("Name: " + name.toString());
				defCount++; 
				return false; 
			}
			
			//Records number of references to the given type 
			public boolean visit(SimpleName node) {
				if (this.names.contains(node.getIdentifier())) {
					refCount++; 
				}
				return true;
			}
		});
		
		//Print Output 
		System.out.println("");
		System.out.println(type + "." + " Declarations found: " + defCount + ";");
		System.out.println("references found: " + refCount);
	}

}
